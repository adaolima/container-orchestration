#Fri Jun  8 14:25:46 -03 2018
kind: Namespace
apiVersion: v1
metadata:
  name: config_server_namespace
  labels:
    name: config_server_namespace
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-logs
  namespace: config_server_namespace
  labels:
    type: local
spec:
  storageClassName: standard
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/tmp/shared/logs"

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-app
  namespace: config_server_namespace
  labels:
    type: local
spec:
  storageClassName: standard
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/tmp/shared/app"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    selector.tag: app
  name: pvc-app
  namespace: config_server_namespace
spec:
  storageClassName: standard
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
  volumeName: "pv-app"
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    selector.tag: logs
  name: pvc-logs
  namespace: config_server_namespace
spec:
  storageClassName: standard
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
  volumeName: "pv-logs"
status: {}
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    selector.tag: nginx-upstream
  name: nginx-upstream
  namespace: config_server_namespace
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        selector.tag: nginx-upstream
        selector.type: pod
    spec:
      containers:
      - image: gpupo/container-orchestration:nginx-upstream-latest
        name: nginx-upstream
        imagePullPolicy: IfNotPresent
        #command: [ "/bin/nginxSetUpstream" , "php.config_server_namespace"]
        ports:
        - containerPort: 80
        resources: {}
        volumeMounts:
        - mountPath: /var/log/nginx
          name: pv-logs
        - mountPath: /var/www/app
          name: pv-app
      restartPolicy: Always
      volumes:
      - name: pv-logs
        persistentVolumeClaim:
          claimName: pvc-logs
      - name: pv-app
        persistentVolumeClaim:
          claimName: pvc-app
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  name: nginx-upstream
  namespace: config_server_namespace
spec:
  ports:
  - name: "http"
    port: 80
    targetPort: 80
  selector:
    selector.tag: nginx-upstream
status:
  loadBalancer: {}
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  name: php
  namespace: config_server_namespace
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        selector.tag: php
        selector.type: pod
    spec:
      securityContext:
        runAsUser: 1001
      containers:
      - image: gpupo/container-orchestration:php-fpm-latest
        name: php
        securityContext:
          runAsUser: 1001
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9000
        resources: {}
        volumeMounts:
        - mountPath: /var/www/app
          name: pv-app
      restartPolicy: Always
      volumes:
      - name: pv-app
        persistentVolumeClaim:
          claimName: pvc-app
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  name: php
  namespace: config_server_namespace
spec:
  ports:
  - name: "php"
    port: 9000
    targetPort: 9000
  selector:
    selector.tag: php
status:
  loadBalancer: {}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress.config_server_namespace
  namespace: config_server_namespace
spec:
  rules:
  - host: config_server_domain
    http:
      paths:
      - backend:
          serviceName: nginx-upstream
          servicePort: 80
